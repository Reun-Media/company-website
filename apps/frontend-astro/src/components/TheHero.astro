---
import { client } from "../graphql/urql";
import { graphql } from "../graphql/generated";
import logoSvg from "../assets/reun-logo-01.svg";
import logoSvgAligned from "../assets/reun-logo-01-aligned.svg";
import ButtonPrimary from "./ButtonPrimary.vue";
import { directusAssetUrl } from "../utils/directusAssetUrl";

interface Props {
  /**
   * Selector of target element to scroll to when clicking the CTA button.
   */
  ctaScrollTargetSelector?: string;
}

const { ctaScrollTargetSelector } = Astro.props;

const query = graphql(`
  query theHeroContentQuery($langCode: String!) {
    indexContent {
      backgroundImageLight {
        id
      }
      backgroundImageDark {
        id
      }
      heroContentTranslations(
        filter: { languages_code: { code: { _eq: $langCode } } }
      ) {
        tagline
        message
        ctaButtonText
      }
    }
  }
`);

const { data, error } = await client.query(query, {
  langCode: Astro.currentLocale ?? "",
});
// GraphQL error should prevent building the site
if (error) {
  throw error;
}

const { backgroundImageLight, backgroundImageDark } = data?.indexContent ?? {};
const { message, tagline, ctaButtonText } =
  data?.indexContent?.heroContentTranslations?.[0] ?? {};
---

<header class="min-h-[calc(100vh-(--spacing(16)))] text-center flex flex-col">
  <div
    class="heroBackground app-dialog-scrollbar-padding -z-20"
    style={{
      "--hero-bg-light": `url('${directusAssetUrl(backgroundImageLight?.id ?? "")}')`,
      "--hero-bg-dark": `url('${directusAssetUrl(backgroundImageDark?.id ?? "")}')`,
    }}
  >
  </div>
  {
    /*
      Hero section is divided into 2 sections:
      - Top: Logo + Tagline
      - Bottom: Introduction text + CTA
      Sections are sized 1/2 + 1/2 in landscape and 1/3 + 2/3 in portrait mode
    */
  }
  <div class="mx-4 flex flex-col sm:mx-6 grow">
    {/* Top section - Logo + Tagline */}
    <div class="flex min-h-0 flex-col justify-center">
      <div>
        {/* Logo */}
        {
          /*
            Responsive logo is either centered or aligned with margin based on
            screen width. We can't use Astro's `<Picture>` component because of
            custom media query.
          */
        }
        <picture class="flex-shrink">
          {/* Aligned logo with left margin for larger screens (sm+) */}
          <source
            media="(min-width: 640px)"
            srcset={logoSvgAligned.src}
            width={logoSvgAligned.width}
            height={logoSvgAligned.height}
          />
          {/* Centered logo for smaller screens*/}
          <img
            class="w-full mx-auto min-h-0 max-w-[1420px]"
            src={logoSvg.src}
            width={logoSvg.width}
            height={logoSvg.height}
            alt="Reun Media logo. A large bold REUN text followed by a logomark with 6 rounded squares in top right corner."
          />
        </picture>

        {/* Tagline */}
        <div class="mt-3 flex items-center justify-center lg:mt-12">
          <the-hero-tagline>
            <h1
              class="taglineText flex flex-wrap justify-center gap-x-[.8em] text-theme-secondary [.theme-sky-dark_&]:text-silver-500"
            >
              {
                // Split tagline elements by `•` character.
                // `•` characters are used as separators and are inserted as pseudo elements colored with the primary brand color.
                tagline?.split("•").map((taglineElement) => {
                  return (
                    <span class="relative inline-block before:absolute before:-left-[.4em] before:-translate-x-1/2 before:text-theme-primary before:content-['•'] first:before:content-['']">
                      {taglineElement}
                    </span>
                  );
                })
              }
            </h1>
          </the-hero-tagline>
        </div>
      </div>
    </div>

    {/* Bottom section - Introduction text + CTA */}
    <div
      class="my-8 flex flex-1 flex-col basis-0 items-center justify-center after:content-[''] after:flex-1"
    >
      {/* Introduction text */}
      <div class="flex flex-1 items-center justify-center">
        <div
          class="mx-auto max-w-2xl space-y-5 whitespace-pre-line text-left text-lg sm:text-2xl md:text-justify"
        >
          {
            // Split paragraphs separated by 2+ newlines.
            message?.split(/\n{2,}/).map((paragraph) => {
              return <p>{paragraph}</p>;
            })
          }
        </div>
      </div>
      {/* CTA */}
      <the-hero-cta class="my-8" data-target-selector={ctaScrollTargetSelector}>
        {
          ctaButtonText && (
            <ButtonPrimary variant="large">{ctaButtonText}</ButtonPrimary>
          )
        }
      </the-hero-cta>
    </div>
  </div>
</header>

<script>
  /**
   * Custom element for hero tagline that manages dynamic separators when
   * tagline spans multiple lines
   */
  class TheHeroTagline extends HTMLElement {
    #spans: HTMLSpanElement[] = [];

    connectedCallback() {
      this.#spans = [...this.querySelectorAll("span")];
      window.addEventListener("resize", this.#refreshTaglineSeparators);
      this.#refreshTaglineSeparators();
    }

    detachedCallback() {
      window.removeEventListener("resize", this.#refreshTaglineSeparators);
    }

    #refreshTaglineSeparators = () => {
      this.#spans.map((el) => {
        // Get span that preceeds this span
        const prevEl = el.previousElementSibling;
        if (!(prevEl instanceof HTMLElement)) return;

        el.classList.toggle(
          // If the previous span's offset is above this span that means this
          // span is first on a new line and should hide separator to its left
          "hideTaglineSeparator",
          !!prevEl && prevEl.offsetTop < el.offsetTop,
        );
      });
    };
  }
  customElements.define("the-hero-tagline", TheHeroTagline);

  /**
   * Hero CTA button that scrolls to a selected HTML element on click
   */
  class TheHeroCta extends HTMLElement {
    #button?: HTMLButtonElement | null;
    #targetEl?: HTMLElement | null;

    connectedCallback() {
      this.#button = this.querySelector("button");
      this.#targetEl = document.querySelector(
        this.dataset.targetSelector ?? "",
      );

      this.#button?.addEventListener("click", this.#scrollToTarget);
    }

    detachedCallback() {
      this.#button?.removeEventListener("click", this.#scrollToTarget);
    }

    // Use arrow function to retain `this` binding
    #scrollToTarget = () => {
      if (!this.#targetEl) return;
      window.scrollTo({ top: this.#targetEl.offsetTop, behavior: "smooth" });
    };
  }
  customElements.define("the-hero-cta", TheHeroCta);
</script>

<style>
  @reference "../styles/global.css";

  /* prettier-ignore */
  .heroBackground {
    @apply absolute
      inset-0
      overflow-x-clip
      before:absolute
      before:-inset-1/4
      before:bg-[image:var(--hero-bg-light)]
      before:bg-contain
      before:bg-center
      before:bg-no-repeat
      before:bg-origin-content
      before:pr-[inherit];
  }

  :global(.theme-sky-dark) .heroBackground {
    @apply before:bg-[image:var(--hero-bg-dark)];
  }

  /**
   * Responsive tagline
   * https://royalfig.github.io/fluid-typography-calculator/
   *
   * |          | Font Size           | Viewport        |
   * |----------|---------------------|-----------------|
   * | **From** | 1.5rem (2xl / 24px) |  40rem ( 640px) |
   * | **To**   | 3.0rem (5xl / 48px) | 120rem (1920px) |
   */
  .taglineText {
    font-size: 1.5rem;
    font-size: clamp(
      1.5rem,
      0.7499999999999999rem + 1.8750000000000002vw,
      3rem
    );
  }

  /**
   * This class is toggled to hide tagline separators when elements wrap
   */
  .taglineText .hideTaglineSeparator::before {
    content: "";
  }
</style>
